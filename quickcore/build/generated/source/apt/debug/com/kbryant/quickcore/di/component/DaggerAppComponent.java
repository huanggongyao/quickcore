// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.kbryant.quickcore.di.component;

import com.kbryant.quickcore.core.impl.AppTarget;
import com.kbryant.quickcore.core.impl.AppTarget_MembersInjector;
import com.kbryant.quickcore.di.module.GlobalConfigModule;
import com.kbryant.quickcore.di.module.GlobalConfigModule_ProvideRepositoryStoreFactory;
import com.kbryant.quickcore.di.module.HttpConfigModule;
import com.kbryant.quickcore.di.module.HttpConfigModule_ProvideOkHttpClientFactory;
import com.kbryant.quickcore.di.module.HttpConfigModule_ProvideRetrofitFactory;
import com.kbryant.quickcore.repository.impl.RepositoryStore;
import dagger.MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

public final class DaggerAppComponent implements AppComponent {
  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<RepositoryStore> provideRepositoryStoreProvider;

  private MembersInjector<AppTarget> appTargetMembersInjector;

  private DaggerAppComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.provideOkHttpClientProvider =
        DoubleCheck.provider(
            HttpConfigModule_ProvideOkHttpClientFactory.create(builder.httpConfigModule));

    this.provideRetrofitProvider =
        DoubleCheck.provider(
            HttpConfigModule_ProvideRetrofitFactory.create(
                builder.httpConfigModule, provideOkHttpClientProvider));

    this.provideRepositoryStoreProvider =
        DoubleCheck.provider(
            GlobalConfigModule_ProvideRepositoryStoreFactory.create(
                builder.globalConfigModule, provideRetrofitProvider));

    this.appTargetMembersInjector =
        AppTarget_MembersInjector.create(provideRepositoryStoreProvider);
  }

  @Override
  public OkHttpClient okhttp() {
    return provideOkHttpClientProvider.get();
  }

  @Override
  public Retrofit retrofit() {
    return provideRetrofitProvider.get();
  }

  @Override
  public RepositoryStore repositoryStore() {
    return provideRepositoryStoreProvider.get();
  }

  @Override
  public void inject(AppTarget appTarget) {
    appTargetMembersInjector.injectMembers(appTarget);
  }

  public static final class Builder {
    private HttpConfigModule httpConfigModule;

    private GlobalConfigModule globalConfigModule;

    private Builder() {}

    public AppComponent build() {
      if (httpConfigModule == null) {
        throw new IllegalStateException(HttpConfigModule.class.getCanonicalName() + " must be set");
      }
      if (globalConfigModule == null) {
        throw new IllegalStateException(
            GlobalConfigModule.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    public Builder httpConfigModule(HttpConfigModule httpConfigModule) {
      this.httpConfigModule = Preconditions.checkNotNull(httpConfigModule);
      return this;
    }

    public Builder globalConfigModule(GlobalConfigModule globalConfigModule) {
      this.globalConfigModule = Preconditions.checkNotNull(globalConfigModule);
      return this;
    }
  }
}
